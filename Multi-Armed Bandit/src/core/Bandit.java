package core;

import java.util.ArrayList;
import java.util.List;

/**
 * Contains the rewards generated by each arm for this trial.
 * Allows all algorithms to receive the same reward on respective pulls,
 * thus eliminating randomness benefits for one algorithm compared to another.
 *
 * @author Sam Beckmann, Nate Beckemeyer
 * @deprecated
 */
public class Bandit
{
    /**
     * The rewards for each arm after n pulls, to ensure consistent rewards across algorithms (removing the chance one
     * algorithm outperforms another based purely on luck).
     */
    private ArrayList<List<Double>> rewards;

    /**
     * Generates bandit given number of arms for each trial.
     *
     * @param numArms The number of arms in the dataset used by the bandit.
     */
    public Bandit(int numArms)
    {
        rewards = new ArrayList<List<Double>>(numArms);
        for (int i = 0; i < numArms; i++)
        {
            rewards.add(new ArrayList<Double>());
        }
    } // end constructor

    /**
     * Returns the pre-calculated reward for an arm if one exists. If one does not exist, creates one to be used across
     * all algorithms for the nth pull.
     *
     * @param armIndex     index of the arm to be pulled
     * @param pullingAgent the agent attempting to pull the arm
     * @return the reward of the arm
     */
    public double pullArm(int armIndex, Agent pullingAgent)
    {
        return pullingAgent.getArms()[armIndex].getReward();
    } // end pullArm
}
